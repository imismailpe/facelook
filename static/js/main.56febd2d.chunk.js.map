{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","style","display","justifyContent","className","Logo","tilt_default","options","max","height","width","role","aria-label","ImageLinkForm","_ref","inputChange","onbuttonClick","concepts","isloading","concat","placeholder","type","onChange","onClick","FaceRecognition","imgurl","src","alt","Rank","app","Clarifai","App","apiKey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","oninputchange","event","temp","target","value","setState","state","inputUrlText","onimageSubmit","inputUrl","models","predict","GENERAL_MODEL","then","response","console","log","outputs","data","name","c","updateConcepts","error","con","components_Navigation_Navigation","components_Logo_Logo","components_Rank_Rank","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56febd2d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ()=>{\n\treturn(\n\t\t<nav style={{display:'flex', justifyContent:'flex-end'}} >\n\t\t\t<p className=\"f3 dim link white underline pa2 ma1 pointer\"></p>\n\t\t</nav>\n\t\t);\n}\n\nexport default Navigation;","import React from 'react';\nimport Tilt from 'react-tilt';\n\nconst Logo =()=>{\n\treturn(\n<div className=\"ma2 mt1\">\n\t<Tilt className=\"Tilt br2 shadow-2 ma2\" options={{ max : 25 }} style={{ height: 100, width: 100 }} >\n <div className=\"Tilt-inner f1\"><span role=\"img\" aria-label=\"face\"> ðŸ‘½ </span></div>\n</Tilt>\n</div>\n\t\t);\n}\n\nexport default Logo;","import React from 'react';\n\nconst ImageLinkForm =({inputChange,onbuttonClick,concepts, isloading})=>{\n\treturn(\n<div className=\"f4\">\n\t<h6 className='white'>Results:</h6>\n\t<p className=\"white resultText\">{isloading? 'Loading..' : concepts ? `its probably ${concepts}` : ''}</p>\n\t<div className=\"pa2\">\n\t\t<input placeholder='paste an image url' type=\"text\" className=\"f4 pa2 w-70\" onChange={inputChange}/>\n\t\t<button className=\"w-10 grow f4 link ph3 pv2 dib white bg-dark-pink\" onClick={onbuttonClick}>go</button>\n\t</div>\n</div>\n\t\t);\n}\nexport default ImageLinkForm;","import React from 'react';\n\nconst FaceRecognition = ({imgurl})=>{\n\treturn(\n\t\t<div className=\"center ma2 pa2 br2 white\">\n\t\t\t<img src={imgurl} width=\"250px\" height=\"auto\" alt=\"input of FaceRecognition\"/>\n\t\t</div>\n\t\t);\n}\nexport default FaceRecognition;","import React from 'react';\n\nconst Rank =()=>{\n\treturn(\n<div className=\"black f2 white\">Image Recognition</div>\n\t\t);\n}\n\nexport default Rank;","import React,{Component} from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Rank from './components/Rank/Rank';\nimport tachyons from 'tachyons';\n\nconst app = new Clarifai.App({\n  apiKey: '3c28c898a6fb41cca8cf0970aa91d8f8'\n});\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      inputUrlText:'',\n      inputUrl:'',\n      concepts:'',\n      isloading: false\n    }\n  }\n\n  oninputchange=(event)=>{\n    let temp=event.target.value;\n    this.setState((state)=>{\n      return {inputUrlText:temp}\n    });\n  };\n  onimageSubmit=()=>{\n    this.setState((state)=>{\n      return {inputUrl:this.state.inputUrlText, isloading: true}\n    });\n    app.models.predict(Clarifai.GENERAL_MODEL, this.state.inputUrlText)\n      .then(\n        (response)=>{\n        console.log(\"resp--\",response.outputs[0].data.concepts[0].name);\n        this.c=response.outputs[0].data.concepts[0].name;\n        this.updateConcepts(this.c);\n//        response.outputs[0].data.regions[0].region_info.bounding_box\n        },\n        (error)=>{\n        console.log(\"oh oh\",error);\n        }\n      );\n  };\n  updateConcepts=(con)=>{\n    this.setState({concepts:con, isloading: false});\n  }\n  render(){\n      return (\n        <div className=\"App\">\n          <Navigation/>\n          <Logo/><Rank/>\n          <ImageLinkForm isloading={this.state.isloading} inputChange={this.oninputchange} onbuttonClick={this.onimageSubmit} concepts={this.state.concepts}/>\n          <FaceRecognition imgurl={this.state.inputUrlText}/>\n        </div>\n      ); \n  }\n}  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}